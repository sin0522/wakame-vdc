#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'isono'

require 'thor'
require 'thor/group'
require 'erb'


#################
# CLI main part

Dcmgr.load_conf(Dcmgr::Configurations::Dcmgr,
                ['/etc/wakame-vdc/dcmgr.conf',
                 File.expand_path('config/dcmgr.conf', Dcmgr::DCMGR_ROOT)
                ])
Dcmgr.run_initializers('sequel')

class RootCli < Thor
  register(Dcmgr::Cli::Network,  Dcmgr::Cli::Network.namespace, "network sub-command", "Operations for network information")
  register(Dcmgr::Cli::Host, Dcmgr::Cli::Host.namespace, "host sub-command", "Operations for host node")
  register(Dcmgr::Cli::Storage, Dcmgr::Cli::Storage.namespace, "storage sub-command", "Operations for storage node")
  register(Dcmgr::Cli::Vlan, Dcmgr::Cli::Vlan.namespace, "vlan sub-command", "Operations for vlan leases")
  register(Dcmgr::Cli::Image, Dcmgr::Cli::Image.namespace, "image sub-command", "Operations for machine images")
  register(Dcmgr::Cli::KeyPair, Dcmgr::Cli::KeyPair.namespace, "keypair sub-command", "Operations for key pairs")
  register(Dcmgr::Cli::SecurityGroup, Dcmgr::Cli::SecurityGroup.namespace, "securitygroup sub-command", "Operations for security groups")
  register(Dcmgr::Cli::Spec, Dcmgr::Cli::Spec.namespace, "spec sub-command", "Operations for instance specifications")
  register(Dcmgr::Cli::Tag, Dcmgr::Cli::Tag.namespace, "tag sub-command", "Operations for tags")
  register(Dcmgr::Cli::Quota, Dcmgr::Cli::Quota.namespace, "quota sub-command", "Operations for quota")
  register(Dcmgr::Cli::BackupStorage, Dcmgr::Cli::BackupStorage.namespace, "backupstorage sub-command", "Operations for backup storage")
end


begin
  RootCli.start
rescue => e
  orig_e = e
  e = Dcmgr::Cli::Error.new(e,101) unless e.is_a?(Dcmgr::Cli::Error)
  STDERR.puts "ERROR: #{e.message} (#{orig_e.backtrace.first})"
  if e.respond_to?(:exit_code)
    exit(e.exit_code)
  else
    exit(1)
  end
end
